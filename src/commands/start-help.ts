import { CommandContext } from "../types/commands";
import {
  createUser,
  getUserByTelegramId,
  getUserSettings,
  saveUserSettings,
} from "../lib/database";

const HELP_MESSAGE = `ü§ñ Welcome to Base MEV-Protected Trading Bot!\n\nTrade ERC-20 tokens with MEV protection on the Base Network.\n\nüß± Getting Started\n- /create ‚Äî Create a new wallet\n- /import ‚Äî Import an existing wallet\n\nüíº Wallet Management\n- /wallet ‚Äî View your wallet address and type\n- /deposit ‚Äî Get your deposit address\n- /withdraw ‚Äî Withdraw ETH to another address\n- /balance ‚Äî Check your current token balances\n- /history ‚Äî View your balance history\n- /export ‚Äî Export your private key\n\nüìà Trading Commands\n- /buy ‚Äî Buy tokens with ETH\n- /sell ‚Äî Sell tokens for ETH\n\n‚öôÔ∏è Settings & Info\n- /settings ‚Äî Configure your trading preferences\n- /help ‚Äî Show this help message\n\nüõ† Tip: Start by creating or importing a wallet, then deposit ETH to begin trading.`;

export const startHandler = {
  command: "start",
  description: "Start the bot and register user",
  handler: async ({ session }: CommandContext) => {
    try {
      const userId = session.userId;
      if (!userId) {
        return {
          response: "‚ùå Unable to identify user. Please try again later.",
        };
      }

      const existingUser = await getUserByTelegramId(userId); // ‚úÖ Await

      if (!existingUser) {
        await createUser(userId, userId, undefined, undefined, undefined); // ‚úÖ Await
        await saveUserSettings(userId, {
          slippage: 1.0,
          gasPriority: "medium",
        }); // ‚úÖ Await

        return {
          response: HELP_MESSAGE,
        };
      } else {
        const settings = await getUserSettings(userId); // ‚úÖ Await
        if (settings) {
          session.settings = settings;
        }

        return {
          response: `ü§ñ Welcome back to Base MEV-Protected Trading Bot!\n\nWhat would you like to do today?`,
          buttons: [
            [
              { label: "üí∞ Balance", callback: "check_balance" },
              { label: "üìä History", callback: "check_history" },
            ],
            [
              { label: "üí± Buy Token", callback: "buy_token" },
              { label: "üí± Sell Token", callback: "sell_token" },
            ],
            [
              { label: "‚öôÔ∏è Settings", callback: "open_settings" },
              { label: "üìã Help", callback: "help" },
            ],
          ],
        };
      }
    } catch (error) {
      console.error("Error in start command:", error);
      return { response: "‚ùå An error occurred. Please try again later." };
    }
  },
};

export const helpHandler = {
  command: "help",
  description: "Show help information and available commands",
  handler: async () => {
    try {
      return { response: HELP_MESSAGE };
    } catch (error) {
      console.error("Error in help command:", error);
      return {
        response:
          "‚ùå An error occurred while displaying help. Please try again later.",
      };
    }
  },
};
